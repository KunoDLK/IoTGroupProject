@model Bindicator.ViewModels.BinTrendViewModel

@{
    ViewData["Title"] = "Bin Fill Trend";

    var labels = Model.Readings.Select(r => r.Timestamp.ToLocalTime().ToString("HH:mm")).ToList();
    var fillLevels = Model.Readings.Select(r => r.FillLevel).ToList();
    var weights = Model.Readings.Select(r => r.Weight).ToList();
    var densities = Model.Readings.Select(r => r.Density).ToList();

    // Build the spike annotations
    var spikeAnnotations = Model.Spikes.Select((spike, index) => $@"""spike{index}"": {{
    type: 'line',
    xMin: '{spike.Timestamp.ToLocalTime():HH\\:mm}',
    xMax: '{spike.Timestamp.ToLocalTime():HH\\:mm}',
    borderColor: 'blue', // 🔵 matches fill level
    borderWidth: 2,
    label: {{
        content: 'Spike: {spike.ToLevel}%',
        enabled: true,
        position: 'start',
        backgroundColor: 'rgba(0, 0, 255, 0.1)', // subtle blue background
        color: 'blue'
        }}
    }}");

    var annotationsJson = "{" + string.Join(",", spikeAnnotations) + "}";
}

<h2>Bin Fill Trend</h2>

<p>
    <strong>@Model.Street @Model.BinNumber</strong> (@Model.Postcode)
</p>

<canvas id="fillChart" width="800" height="400"></canvas>

@if (Model.PredictedFullDate.HasValue && Model.DaysToFull.HasValue)
{
    <div class="alert alert-info mt-4">
        <strong>🧠 Prediction:</strong><br />
        Based on current trends, this bin is predicted to be full
        <strong>@Model.DaysToFull.Value.ToString("0.0") days</strong> from the earliest reading,
        around <strong>@Model.PredictedFullDate.Value.ToLocalTime().ToString("f")</strong>.
    </div>
}
else
{
    <div class="alert alert-secondary mt-4">
        Prediction not available — not enough historical data.
    </div>
}


<!-- Chart.js & Annotations plugin -->
<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-annotation@3.0.1"></script>

<script>
    Chart.register(window['chartjs-plugin-annotation']);

    const ctx = document.getElementById('fillChart').getContext('2d');

    const chart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: @Html.Raw(Json.Serialize(labels)),
            datasets: [
                {
                    label: 'Fill Level (%)',
                    data: @Html.Raw(Json.Serialize(fillLevels)),
                    borderColor: 'blue',
                    backgroundColor: 'rgba(0, 0, 255, 0.1)',
                    tension: 0.2,
                    fill: false
                },
                {
                    label: 'Weight (kg)',
                    data: @Html.Raw(Json.Serialize(weights)),
                    borderColor: 'red',
                    backgroundColor: 'rgba(255, 0, 0, 0.1)',
                    tension: 0.2,
                    fill: false
                },
                {
                    label: 'Density',
                    data: @Html.Raw(Json.Serialize(densities)),
                    borderColor: 'green',
                    backgroundColor: 'rgba(0, 128, 0, 0.1)',
                    tension: 0.2,
                    fill: false
                }
            ]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'top'
                },
                title: {
                    display: false
                },
                annotation: {
                    annotations: @Html.Raw(annotationsJson)
                }
            },
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
</script>

@if (Model.Spikes.Any())
{
    <div class="alert alert-warning mt-4">
        <strong>⚠️ Sudden Fill Spikes Detected:</strong>
        <ul>
            @foreach (var spike in Model.Spikes)
            {
                <li>
                    @spike.Timestamp.ToLocalTime(): Fill jumped from @spike.FromLevel% to @spike.ToLevel%
                </li>
            }
        </ul>
    </div>
}
